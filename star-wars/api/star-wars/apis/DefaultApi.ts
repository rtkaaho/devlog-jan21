/* tslint:disable */
/* eslint-disable */
/**
 * Star Wars API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    Person,
    PersonFromJSON,
    PersonToJSON,
    Planet,
    PlanetFromJSON,
    PlanetToJSON,
} from '../models';

export interface GetPersonRequest {
    personId: number;
}

export interface GetPlanetRequest {
    planetId: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Gets all of the people in star wars
     */
    async getPeopleRaw(): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/people`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Gets all of the people in star wars
     */
    async getPeople(): Promise<InlineResponse200> {
        const response = await this.getPeopleRaw();
        return await response.value();
    }

    /**
     * Gets a single person
     */
    async getPersonRaw(requestParameters: GetPersonRequest): Promise<runtime.ApiResponse<Person>> {
        if (requestParameters.personId === null || requestParameters.personId === undefined) {
            throw new runtime.RequiredError('personId','Required parameter requestParameters.personId was null or undefined when calling getPerson.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/people/{person_id}`.replace(`{${"person_id"}}`, encodeURIComponent(String(requestParameters.personId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonFromJSON(jsonValue));
    }

    /**
     * Gets a single person
     */
    async getPerson(requestParameters: GetPersonRequest): Promise<Person> {
        const response = await this.getPersonRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets a single planet
     */
    async getPlanetRaw(requestParameters: GetPlanetRequest): Promise<runtime.ApiResponse<Planet>> {
        if (requestParameters.planetId === null || requestParameters.planetId === undefined) {
            throw new runtime.RequiredError('planetId','Required parameter requestParameters.planetId was null or undefined when calling getPlanet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/planets/{planet_id}`.replace(`{${"planet_id"}}`, encodeURIComponent(String(requestParameters.planetId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PlanetFromJSON(jsonValue));
    }

    /**
     * Gets a single planet
     */
    async getPlanet(requestParameters: GetPlanetRequest): Promise<Planet> {
        const response = await this.getPlanetRaw(requestParameters);
        return await response.value();
    }

}
