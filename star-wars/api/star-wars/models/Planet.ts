/* tslint:disable */
/* eslint-disable */
/**
 * Star Wars API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Planet
 */
export interface Planet {
    /**
     * 
     * @type {string}
     * @memberof Planet
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Planet
     */
    diameter?: string;
    /**
     * 
     * @type {string}
     * @memberof Planet
     */
    rotationPeriod?: string;
    /**
     * 
     * @type {string}
     * @memberof Planet
     */
    orbitalPeriod?: string;
    /**
     * 
     * @type {string}
     * @memberof Planet
     */
    gravity?: string;
    /**
     * 
     * @type {string}
     * @memberof Planet
     */
    population?: string;
    /**
     * 
     * @type {string}
     * @memberof Planet
     */
    climate?: string;
    /**
     * 
     * @type {string}
     * @memberof Planet
     */
    terrain?: string;
    /**
     * 
     * @type {string}
     * @memberof Planet
     */
    surfaceWater?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Planet
     */
    residents?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Planet
     */
    films?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Planet
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof Planet
     */
    created?: string;
    /**
     * 
     * @type {string}
     * @memberof Planet
     */
    edited?: string;
}

export function PlanetFromJSON(json: any): Planet {
    return PlanetFromJSONTyped(json, false);
}

export function PlanetFromJSONTyped(json: any, ignoreDiscriminator: boolean): Planet {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'diameter': !exists(json, 'diameter') ? undefined : json['diameter'],
        'rotationPeriod': !exists(json, 'rotation_period') ? undefined : json['rotation_period'],
        'orbitalPeriod': !exists(json, 'orbital_period') ? undefined : json['orbital_period'],
        'gravity': !exists(json, 'gravity') ? undefined : json['gravity'],
        'population': !exists(json, 'population') ? undefined : json['population'],
        'climate': !exists(json, 'climate') ? undefined : json['climate'],
        'terrain': !exists(json, 'terrain') ? undefined : json['terrain'],
        'surfaceWater': !exists(json, 'surface_water') ? undefined : json['surface_water'],
        'residents': !exists(json, 'residents') ? undefined : json['residents'],
        'films': !exists(json, 'films') ? undefined : json['films'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'created': !exists(json, 'created') ? undefined : json['created'],
        'edited': !exists(json, 'edited') ? undefined : json['edited'],
    };
}

export function PlanetToJSON(value?: Planet | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'diameter': value.diameter,
        'rotation_period': value.rotationPeriod,
        'orbital_period': value.orbitalPeriod,
        'gravity': value.gravity,
        'population': value.population,
        'climate': value.climate,
        'terrain': value.terrain,
        'surface_water': value.surfaceWater,
        'residents': value.residents,
        'films': value.films,
        'url': value.url,
        'created': value.created,
        'edited': value.edited,
    };
}


